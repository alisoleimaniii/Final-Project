/*!
  FlexMenu jQuery Responsive Mega Menu
  @name jquery.flexmenu.js
  @description a jQuery plugin for creating a flexible menu
  @version 1.2.0
  @author Max Lawrence 
  @site http://www.avirtum.com
  @copyright (c) 2016 Max Lawrence (http://www.avirtum.com)
*/
! function(a) {
    "use strict";

    function b(a, b) { this.config = null, this.container = null, this.controls = {}, this.sidemenu = !1, this.loaded = !1, this.animation = !1, this.init(a, b) }
    var c = function() {
            function a() {}
            return a.prototype.isMobile = function(a) { return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(a) }, a.prototype.animationEvent = function() {
                var a = document.createElement("fakeelement"),
                    b = { animation: "animationend", MSAnimationEnd: "msAnimationEnd", OAnimation: "oAnimationEnd", MozAnimation: "mozAnimationEnd", WebkitAnimation: "webkitAnimationEnd" };
                for (var c in b)
                    if (void 0 !== a.style[c]) return b[c]
            }, a
        }(),
        d = "flexmenu",
        e = "flexmenu-instance";
    b.prototype = {
        VERSION: "1.2.0",
        defaults: { theme: null, triggerClick: !1, responsive: !0, responsiveWidth: 768, dropdownShowClass: null, dropdownHideClass: null, sidemenuPosition: "left", sidemenuSlideShowClass: null, sidemenuSlideHideClass: null, sidemenuSlideSync: !0, sidemenuSidebar: !0, sidemenuWidth: "80%", sidemenuMenuBtnToggle: !0, sidemenuMenuBtnToggleHtml: "", sidemenuBackBtnText: null, mobile: !1 },
        init: function(a, b) { this.destroy(), this.container = a, this.config = b, this.create() },
        create: function() { this.checkAnimation(), this.applyDOM(), this.applyHandlers(), this.updateLayout(), this.loaded = !0 },
        destroy: function() { this.loaded && (this.resetHandlers(), this.resetDOM()) },
        checkAnimation: function() {
            var a = !this.config.mobile && this.util().isMobile(navigator.userAgent);
            (void 0 == this.util().animationEvent() || a) && (this.config.dropdownShowClass = null, this.config.dropdownHideClass = null, this.config.sidemenuSlideShowClass = null, this.config.sidemenuSlideHideClass = null)
        },
        applyDOM: function() {
            this.container.addClass("fxm-menu"), this.container.find(".fxm-item > .fxm-submenu").each(function() {
                var b = a(this);
                b.closest(".fxm-item").addClass("fxm-item-has-children"), b.addClass("fxm-submenu"), b.hasClass("fxm-submenu-mega") && b.closest(".fxm-item").addClass("fxm-item-has-mega")
            }), this.container.find(".fxm-item > .fxm-submenu-reverse").each(function() { a(this).closest(".fxm-item").addClass("fxm-item-has-reverse") }), this.applyWidthForMega(), this.container.wrap("<div class='fxm-wrap" + (this.config.theme ? " " + this.config.theme : "") + "'></div>"), this.controls.wrap = this.container.parent(".fxm-wrap"), this.controls.view = a("<div class='fxm-view'></div>"), this.controls.slide1 = a("<ul class='fxm-slidemenu'></ul>"), this.controls.view.append(this.controls.slide1), this.controls.slide2 = a("<ul class='fxm-slidemenu'></ul>"), this.controls.view.append(this.controls.slide2), this.controls.sidebar = a("<div class='fxm-sidebar'></div>"), this.controls.btnToggle = a("<div class='fxm-btn-toggle'>" + this.config.sidemenuMenuBtnToggleHtml + "</div>"), this.config.sidemenuMenuBtnToggle && this.controls.sidebar.append(this.controls.btnToggle), this.config.sidemenuSidebar && this.controls.wrap.prepend(this.controls.sidebar), this.controls.wrap.prepend(this.controls.view)
        },
        applyWidthForMega: function() {
            setTimeout(a.proxy(function() {
                this.container.find(".fxm-submenu-mega").each(function() {
                    var b = a(this),
                        c = b.get(0).offsetWidth;
                    b.data(d, c)
                })
            }, this), 50)
        },
        resetDOM: function() { this.resetSidemenu(), this.resetSlides(), this.container.removeClass("fxm-menu"), this.container.find(".fxm-item-has-children").removeClass("fxm-item-has-children"), this.container.find(".fxm-item-has-mega").removeClass("fxm-item-has-mega"), this.controls.view.remove(), this.controls.sidebar.remove(), this.container.unwrap() },
        applyHandlers: function() { this.container.on("mouseleave.flexmenu", a.proxy(this.onMenuLeave, this)), this.container.find(".fxm-item > a").on("click.flexmenu", a.proxy(this.onItemClick, this)), this.container.find(".fxm-item > a").on("mouseenter.flexmenu", a.proxy(this.onItemHover, this)), this.controls.btnToggle.on("click.flexmenu", a.proxy(this.onBtnToggleClick, this)), a(window).on("resize.flexmenu", a.proxy(this.onResize, this)), a(window).on("load.flexmenu", a.proxy(this.onLoad, this)), a(document).on("click.flexmenu", a.proxy(this.onDocumentClick, this)) },
        resetHandlers: function() { this.container.off("mouseleave.flexmenu"), this.container.find(".fxm-item > a").off("click.flexmenu"), this.container.find(".fxm-item > a").off("mouseenter.flexmenu"), this.controls.btnToggle.off("click.flexmenu"), a(window).off("resize.flexmenu"), a(window).off("load.flexmenu"), a(document).off("click.flexmenu") },
        applySlide: function(b, c, e) {
            if (e) {
                var f = a("<li class='fxm-item fxm-btn-back'><a href='#'></a></li>"),
                    g = f.find("> a");
                if (this.config.sidemenuBackBtnText) g.html(this.config.sidemenuBackBtnText);
                else {
                    var h = c.siblings("a").html();
                    g.html(h)
                }
                g.on("click.flexmenu", a.proxy(this.onItemClick, this)), g.data(d, { owner: c }), b.append(f)
            }
            if (b.data(d, { owner: c }), c.hasClass("fxm-submenu-mega")) {
                var f = c.children();
                f.detach(), f.hasClass("fxm-item-wrap") || (f = a("<li class='fxm-item fxm-item-wrap'></li>").append(f)), b.append(f)
            } else c.find("> .fxm-item").each(a.proxy(function(c, e) {
                var f = a(e),
                    g = f.find("> .fxm-submenu");
                f.detach(), g.length ? f.find("> a").data(d, { submenu: g }) : f.find("> a").data(d, { submenu: null }), b.append(f)
            }, this))
        },
        resetSlide: function(b) {
            var c = b.data(d);
            c && c.owner && b.find("> .fxm-item").each(a.proxy(function(b, d) {
                var e = a(d);
                e.detach(), e.hasClass("fxm-btn-back") ? e.remove() : (e.hasClass("fxm-item-wrap") && (e = e.children()), c.owner.append(e))
            }, this))
        },
        resetSlides: function() { this.resetSlide(this.controls.slide1), this.resetSlide(this.controls.slide2), this.controls.slide1.empty().removeClass("fxm-active").removeClass(this.config.sidemenuSlideShowClass).removeClass(this.config.sidemenuSlideHideClass), this.controls.slide2.empty().removeClass("fxm-active").removeClass(this.config.sidemenuSlideShowClass).removeClass(this.config.sidemenuSlideHideClass) },
        animateSlides: function() {
            var b = this.controls.slide1.hasClass("fxm-active") ? this.controls.slide1 : this.controls.slide2,
                c = this.controls.slide1.hasClass("fxm-active") ? this.controls.slide2 : this.controls.slide1;
            c.removeClass(this.config.sidemenuSlideHideClass), b.removeClass(this.config.sidemenuSlideShowClass), this.controls.view.removeClass("fxm-overflow-auto"), this.config.sidemenuSlideHideClass ? (this.animation = !0, b.addClass(this.config.sidemenuSlideHideClass), b.one(this.util().animationEvent(), a.proxy(function(b) {
                if (!a(b.target).hasClass(this.config.sidemenuSlideShowClass)) {
                    if (!this.config.sidemenuSlideSync) {
                        var c = this.controls.slide1.hasClass("fxm-active") ? this.controls.slide2 : this.controls.slide1;
                        c.addClass("fxm-active"), c.addClass(this.config.sidemenuSlideShowClass)
                    }
                    a(b.target).removeClass("fxm-active")
                }
                this.animation = !1, this.controls.view.addClass("fxm-overflow-auto")
            }, this)), this.config.sidemenuSlideSync && (c.addClass("fxm-active"), c.addClass(this.config.sidemenuSlideShowClass))) : (b.removeClass("fxm-active"), c.addClass("fxm-active"), c.addClass(this.config.sidemenuSlideShowClass), this.controls.view.addClass("fxm-overflow-auto"))
        },
        applySidemenu: function() { this.sidemenu || (this.sidemenu = !0, this.container.detach(), this.container.find(".fxm-item-has-mega").css({ position: "" }), "left" == this.config.sidemenuPosition ? (a("body").addClass("fxm-sidemenu fxm-sidemenu-left"), this.controls.wrap.addClass("fxm-sidemenu fxm-sidemenu-left").css({ left: "-" + this.config.sidemenuWidth, width: this.config.sidemenuWidth })) : (a("body").addClass("fxm-sidemenu fxm-sidemenu-right"), this.controls.wrap.addClass("fxm-sidemenu fxm-sidemenu-right").css({ right: "-" + this.config.sidemenuWidth, width: this.config.sidemenuWidth })), this.hideSubmenus(this.container), this.applySlide(this.controls.slide1, this.container, !1), this.controls.slide1.addClass("fxm-active")) },
        resetSidemenu: function() { this.sidemenu && (this.sidemenu = !1, this.controls.wrap.append(this.container), a("body").removeClass("fxm-sidemenu fxm-sidemenu-left fxm-sidemenu-right").removeClass("fxm-active"), this.controls.wrap.removeClass("fxm-sidemenu fxm-sidemenu-left fxm-sidemenu-right").removeClass("fxm-active").css({ left: "", right: "", width: "" }), this.controls.btnToggle.removeClass("fxm-active"), this.hideSubmenus(this.container), this.applyWidthForMega(), this.resetSlides()) },
        updateSlideWidth: function() {
            var a = this.controls.view.outerWidth() - this.controls.sidebar.outerWidth();
            this.controls.slide1.css({ width: a + "px" }), this.controls.slide2.css({ width: a + "px" })
        },
        updateLayout: function() { this.config.responsive && (a(window).width() < this.config.responsiveWidth ? this.applySidemenu() : this.resetSidemenu(), this.updateSlideWidth()) },
        updateSubmenus: function(a) {
            var b = a.parent(".fxm-item").siblings();
            this.hideSubmenus(b), b = a.siblings(".fxm-submenu"), b.length > 0 && this.showSubmenu(a, b)
        },
        resetSubmenus: function() {
            this.container.find(".fxm-submenu.fxm-active").each(a.proxy(function(b, c) {
                var d = a(c);
                d.hasClass(this.config.dropdownHideClass) && d.removeClass(this.config.dropdownHideClass).removeClass("fxm-active")
            }, this))
        },
        hideSubmenus: function(b) {
            var c = b.find(".fxm-submenu.fxm-active");
            0 != c.length && (c.parent(".fxm-item.fxm-active").removeClass("fxm-active"), c.each(a.proxy(function(b, c) {
                var d = a(c);
                d.removeClass(this.config.dropdownShowClass), d.addClass(this.config.dropdownHideClass), this.config.dropdownHideClass ? d.one(this.util().animationEvent(), a.proxy(function(b) {
                    var c = a(b.target);
                    c.hasClass(this.config.dropdownShowClass) || (c.removeClass("fxm-active"), c.removeClass(this.config.dropdownHideClass)), this.resetSubmenus()
                }, this)) : d.removeClass("fxm-active")
            }, this)))
        },
        applyMegaSubmenuWidth: function(a, b) {
            var c = b.data("fxm-width");
            c ? c.indexOf("%") > -1 && (c = a.parent().outerWidth() * (parseInt(c, 10) / 100)) : c = b.data(d), b.css({ width: c })
        },
        showSubmenu: function(b, c) {
            var d = b.closest(".fxm-item");
            if (d.addClass("fxm-active"), b.is(".fxm-menu > .fxm-item > a"))
                if (c.hasClass("fxm-submenu-mega")) {
                    this.applyMegaSubmenuWidth(d, c);
                    var e = d.get(0).getBoundingClientRect(),
                        f = c.get(0).getBoundingClientRect(),
                        g = 0,
                        h = b.outerHeight() + b.get(0).offsetTop;
                    c.hasClass("fxm-align-center") && (g = Math.ceil(e.width / 2) - Math.ceil(f.width / 2)), d.css({ position: "" }), e.left + g + f.width > a(window).width() && (g = e.width - f.width + 1, e.left + g < 0 && (d.css({ position: "static" }), g = (d.parent().width() - f.width) / 2)), c.css({ right: g + "px", top: h + "px" })
                } else {
                    var h = b.outerHeight() + b.get(0).offsetTop;
                    c.css({ right: "0px", top: h + "px" })
                }
            else {
                c.hasClass("fxm-submenu-mega") && this.applyMegaSubmenuWidth(d, c);
                var i = b.closest(".fxm-item").outerWidth(),
                    j = b.closest(".fxm-submenu");
                if (c.hasClass("fxm-submenu-reverse")) {
                    var k = parseInt(j.css("border-left-width"), 10),
                        l = parseInt(j.css("border-top-width"), 10);
                    k = k > 0 ? k - 1 : k, i = c.outerWidth(), c.css({ right: -i - k + "px", top: -l + "px" })
                } else {
                    var k = parseInt(j.css("border-right-width"), 10),
                        l = parseInt(j.css("border-top-width"), 10);
                    k = k > 0 ? k - 1 : k, c.css({ right: i + k + "px", top: -l + "px" })
                }
            }
            c.addClass("fxm-active"), c.removeClass(this.config.dropdownHideClass), c.addClass(this.config.dropdownShowClass)
        },
        toggleMenu: function() { a("body").toggleClass("fxm-active"), this.controls.wrap.toggleClass("fxm-active"), this.controls.btnToggle.toggleClass("fxm-active") },
        onMenuLeave: function(a) { this.sidemenu || this.config.triggerClick || this.hideSubmenus(this.container) },
        onItemClick: function(b) {
            var c = a(b.target);
            if (c.is("a") || c.parent(".fxm-item > a").length > 0 && (c = c.parent(".fxm-item > a")), !this.animation && (c.parent().find("> .fxm-submenu").length > 0 || c.parent().hasClass("fxm-btn-back")))
                if (b.preventDefault(), b.stopPropagation(), this.sidemenu) {
                    var e = c.data(d),
                        f = e.submenu,
                        g = !0,
                        h = this.controls.slide1.hasClass("fxm-active") ? this.controls.slide2 : this.controls.slide1;
                    if (this.resetSlide(h), !e.submenu) {
                        if (!e.owner) return;
                        f = e.owner, f = f.parentsUntil(this.container, ".fxm-submenu"), 0 == f.length ? (f = this.container, g = !1) : f = a(f.get(0))
                    }
                    this.applySlide(h, f, g), this.animateSlides()
                } else this.config.triggerClick && this.updateSubmenus(c)
        },
        onItemHover: function(b) { this.sidemenu || this.config.triggerClick || this.updateSubmenus(a(b.target)) },
        onDocumentClick: function(b) {!this.sidemenu && this.config.triggerClick && (a(b.target).closest(".fxm-submenu-mega").length > 0 || this.hideSubmenus(this.container)) },
        onBtnToggleClick: function(a) { this.toggleMenu() },
        onResize: function(a) { this.updateLayout() },
        onLoad: function(a) { this.updateLayout() },
        util: function() { return null != this._util ? this._util : this._util = new c }
    }, a.fn.flexmenu = function(c, d) {
        return this.each(function() {
            var d = a(this),
                f = d.data(e),
                g = a.isPlainObject(c) ? c : {};
            if ("destroy" == c) { if (!f) throw Error("Calling 'destroy' method on not initialized instance is forbidden"); return d.removeData(e), void f.destroy() }
            if ("toggle" == c) { if (!f) throw Error("Calling 'toggle' method on not initialized instance is forbidden"); return void f.toggleMenu() }
            if (f) {
                var h = a.extend({}, f.config, g);
                f.init(d, h)
            } else {
                var h = a.extend({}, b.prototype.defaults, g);
                f = new b(d, h), d.data(e, f)
            }
        })
    }
}(window.jQuery);